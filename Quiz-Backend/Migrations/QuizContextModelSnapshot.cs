// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Quiz.Contexts;

#nullable disable

namespace Quiz_Backend.Migrations
{
    [DbContext(typeof(QuizContext))]
    partial class QuizContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Question", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CorrectOption")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OptionA")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OptionB")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OptionC")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OptionD")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QuizId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("guid");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Quiz.Models.Admin", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("guid");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Quiz.Models.Answers", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<string>("SelectedOption")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("quizAttemptId")
                        .HasColumnType("uuid");

                    b.HasKey("guid");

                    b.HasIndex("QuestionId");

                    b.HasIndex("quizAttemptId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Quiz.Models.Attender", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("guid");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Attenders");
                });

            modelBuilder.Entity("Quiz.Models.Category", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("guid");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Quiz.Models.QuizAttempt", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AttemptedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("AttemptorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("AutoSubmitted")
                        .HasColumnType("boolean");

                    b.Property<string>("QuizId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<int>("TimeTakenMins")
                        .HasColumnType("integer");

                    b.HasKey("guid");

                    b.HasIndex("AttemptorId");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizAttempts");
                });

            modelBuilder.Entity("Quiz.Models.User", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("guid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("adminId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("categoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("durationMinutes")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("adminId");

                    b.HasIndex("categoryId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("Question", b =>
                {
                    b.HasOne("QuizData", "quiz")
                        .WithMany("questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("quiz");
                });

            modelBuilder.Entity("Quiz.Models.Admin", b =>
                {
                    b.HasOne("Quiz.Models.User", "user")
                        .WithOne("admin")
                        .HasForeignKey("Quiz.Models.Admin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Quiz.Models.Answers", b =>
                {
                    b.HasOne("Question", "question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quiz.Models.QuizAttempt", "attempt")
                        .WithMany("answers")
                        .HasForeignKey("quizAttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("attempt");

                    b.Navigation("question");
                });

            modelBuilder.Entity("Quiz.Models.Attender", b =>
                {
                    b.HasOne("Quiz.Models.User", "user")
                        .WithOne("attender")
                        .HasForeignKey("Quiz.Models.Attender", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Quiz.Models.QuizAttempt", b =>
                {
                    b.HasOne("Quiz.Models.Attender", "attender")
                        .WithMany("quizAttempts")
                        .HasForeignKey("AttemptorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizData", "quizData")
                        .WithMany("quizAttempts")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("attender");

                    b.Navigation("quizData");
                });

            modelBuilder.Entity("QuizData", b =>
                {
                    b.HasOne("Quiz.Models.Admin", "admin")
                        .WithMany("quizDatas")
                        .HasForeignKey("adminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quiz.Models.Category", "category")
                        .WithMany("quizDatas")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("admin");

                    b.Navigation("category");
                });

            modelBuilder.Entity("Quiz.Models.Admin", b =>
                {
                    b.Navigation("quizDatas");
                });

            modelBuilder.Entity("Quiz.Models.Attender", b =>
                {
                    b.Navigation("quizAttempts");
                });

            modelBuilder.Entity("Quiz.Models.Category", b =>
                {
                    b.Navigation("quizDatas");
                });

            modelBuilder.Entity("Quiz.Models.QuizAttempt", b =>
                {
                    b.Navigation("answers");
                });

            modelBuilder.Entity("Quiz.Models.User", b =>
                {
                    b.Navigation("admin");

                    b.Navigation("attender");
                });

            modelBuilder.Entity("QuizData", b =>
                {
                    b.Navigation("questions");

                    b.Navigation("quizAttempts");
                });
#pragma warning restore 612, 618
        }
    }
}
